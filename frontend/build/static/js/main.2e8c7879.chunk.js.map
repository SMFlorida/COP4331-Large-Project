{"version":3,"sources":["components/PageTitle.js","components/Login.js","pages/LoginPage.js","components/LoggedInName.js","components/CardUI.js","pages/CardPage.js","App.js","serviceWorker.js","index.js"],"names":["PageTitle","id","Login","loginName","loginPassword","useState","message","setMessage","doLogin","event","a","preventDefault","obj","login","value","password","js","JSON","stringify","fetch","method","body","headers","response","text","res","parse","user","firstName","lastName","localStorage","setItem","window","location","href","alert","toString","onSubmit","type","placeholder","ref","c","class","onClick","LoginPage","LoggedInName","CardUI","buildPath","route","card","search","searchResults","setResults","cardList","setCardList","_ud","getItem","ud","userId","console","log","addCard","e","searchCard","txt","_results","results","resultText","i","length","CardPage","App","path","exact","to","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.2e8c7879.chunk.js","sourcesContent":["import React from 'react';\n\nfunction PageTitle()\n{\n   return(\n     <h1 id=\"title\">COP 4331 MERN Stack Demo</h1>\n   );\n};\n\nexport default PageTitle;\n","import React, { useState } from 'react';\n\nfunction Login()\n{\n\n    const app_name = 'seppi'\n    function buildPath(route)\n    {\n        if (process.env.NODE_ENV === 'production') \n        {\n            return 'https://' + app_name +  '.herokuapp.com/' + route;\n        }\n        else\n        {        \n            return 'http://localhost:5000/' + route;\n        }\n    }\n    \n    var loginName;\n    var loginPassword;\n\n    const [message,setMessage] = useState('');\n\n    const doLogin = async event => \n    {\n        event.preventDefault();\n\n        var obj = {login:loginName.value,password:loginPassword.value};\n        var js = JSON.stringify(obj);\n\n        try\n        {    \n            const response = await fetch(buildPath('api/login'),\n                {method:'POST',body:js,headers:{'Content-Type': 'application/json'}});\n\n            var res = JSON.parse(await response.text());\n\n            if( res.id <= 0 )\n            {\n                setMessage('User/Password combination incorrect');\n            }\n            else\n            {\n                var user = {firstName:res.firstName,lastName:res.lastName,id:res.id}\n                localStorage.setItem('user_data', JSON.stringify(user));\n\n                setMessage('');\n                window.location.href = '/cards';\n            }\n        }\n        catch(e)\n        {\n            alert(e.toString());\n            return;\n        }    \n    };\n\n    return(\n      <div id=\"loginDiv\">\n        <form onSubmit={doLogin}>\n        <span id=\"inner-title\">PLEASE LOG IN</span><br />\n        <input type=\"text\" id=\"loginName\" placeholder=\"Username\"  ref={(c) => loginName = c} /><br />\n        <input type=\"password\" id=\"loginPassword\" placeholder=\"Password\" ref={(c) => loginPassword = c}  /><br />\n        <input type=\"submit\" id=\"loginButton\" class=\"buttons\" value = \"Do It\"\n          onClick={doLogin} />\n        </form>\n    <span id=\"loginResult\">{message}</span>\n     </div>\n    );\n};\n\nexport default Login;\n","import React from 'react';\n\nimport PageTitle from '../components/PageTitle';\nimport Login from '../components/Login';\n\nconst LoginPage = () =>\n{\n\n    return(\n      <div>\n        <PageTitle />\n        <Login />\n      </div>\n    );\n};\n\nexport default LoginPage;\n","import React from 'react';\n\nfunction LoggedInName()\n{\n\n    //var user={}\n\n    const doLogout = event => \n    {\n\t    event.preventDefault();\n\t\t\n        alert('doLogout');\n    };    \n\n    return(\n      <div id=\"loggedInDiv\">\n        <span id=\"userName\">Logged In As John Doe </span><br />\n        <button type=\"button\" id=\"logoutButton\" class=\"buttons\" \n           onClick={doLogout}> Log Out </button>\n      </div>\n    );\n};\n\nexport default LoggedInName;\n","import React, { useState } from 'react';\n\nfunction CardUI()\n{\n  const app_name = 'seppi'\n  function buildPath(route)\n  {\n      if (process.env.NODE_ENV === 'production') \n      {\n          return 'https://' + app_name +  '.herokuapp.com/' + route;\n      }\n      else\n      {        \n          return 'http://localhost:5000/' + route;\n      }\n  }\n\n    var card = '';\n    var search = '';\n\n    const [message,setMessage] = useState('');\n    const [searchResults,setResults] = useState('');\n    const [cardList,setCardList] = useState('');\n\n    var _ud = localStorage.getItem('user_data');\n    var ud = JSON.parse(_ud);\n    var userId = ud.id;\n    var firstName = ud.firstName;\n    var lastName = ud.lastName;\n    console.log(firstName);\n    console.log(lastName);\n\t\n    const addCard = async event => \n    {\n\t    event.preventDefault();\n\n        var obj = {userId:userId,card:card.value};\n        var js = JSON.stringify(obj);\n\n        try\n        {\n            const response = fetch(buildPath('api/addcard'),\n            {method:'POST',body:js,headers:{'Content-Type': 'application/json'}});\n\n            console.log(response);\n\n            setMessage('Card has been added');\n        }\n        catch(e)\n        {\n            setMessage(e.toString());\n        }\n\n\t};\n\n    const searchCard = async event => \n    {\n        event.preventDefault();\n        \t\t\n        var obj = {userId:userId,search:search.value};\n        var js = JSON.stringify(obj);\n\n        try\n        {\n            const response = await fetch(buildPath('api/searchcards'),\n            {method:'POST',body:js,headers:{'Content-Type': 'application/json'}});\n\n            var txt = await response.text();\n            var res = JSON.parse(txt);\n            var _results = res.results;\n            var resultText = '';\n            for( var i=0; i<_results.length; i++ )\n            {\n                resultText += _results[i];\n                if( i < _results.length - 1 )\n                {\n                    resultText += ', ';\n                }\n            }\n            setResults('Card(s) have been retrieved');\n            setCardList(resultText);\n        }\n        catch(e)\n        {\n            alert(e.toString());\n            setResults(e.toString());\n        }\n    };\n\n    return(\n        <div id=\"cardUIDiv\">\n        <br />\n        <input type=\"text\" id=\"searchText\" placeholder=\"Card To Search For\" \n          ref={(c) => search = c} />\n        <button type=\"button\" id=\"searchCardButton\" class=\"buttons\" \n          onClick={searchCard}> Search Card</button><br />\n        <span id=\"cardSearchResult\">{searchResults}</span>\n        <p id=\"cardList\">{cardList}</p><br /><br />\n        <input type=\"text\" id=\"cardText\" placeholder=\"Card To Add\" \n          ref={(c) => card = c} />\n        <button type=\"button\" id=\"addCardButton\" class=\"buttons\" \n          onClick={addCard}> Add Card </button><br />\n        <span id=\"cardAddResult\">{message}</span>\n      </div>\n      \n    );\n}\n\nexport default CardUI;\n","import React from 'react';\n\nimport PageTitle from '../components/PageTitle';\nimport LoggedInName from '../components/LoggedInName';\nimport CardUI from '../components/CardUI';\n\nconst CardPage = () =>\n{\n    return(\n        <div>\n            <PageTitle />\n            <LoggedInName />\n            <CardUI />\n        </div>\n    );\n}\n\nexport default CardPage;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport './App.css';\n\nimport LoginPage from './pages/LoginPage';\nimport CardPage from './pages/CardPage';\n\nfunction App() {\n  return (\n    <Router >\n      <Switch>\n        <Route path=\"/\" exact>\n          <LoginPage />\n        </Route>\n        <Route path=\"/cards\" exact>\n          <CardPage />\n        </Route>\n        <Redirect to=\"/\" />\n      </Switch>  \n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}